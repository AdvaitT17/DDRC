# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - ddrc

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: |
          cd server
          npm install
          cd ..

      - name: Fix path in server.js
        run: |
          # Create a backup of server.js
          cp server/server.js server/server.js.bak
          
          # Create a path fix script
          cat > server/path-fix.js << 'EOL'
          // Path correction for Azure deployment
          const fs = require('fs');
          const path = require('path');

          // Determine if we're running in Azure
          const isAzure = process.env.WEBSITE_SITE_NAME !== undefined;

          if (isAzure) {
            console.log('Running in Azure environment, applying path fixes...');
            
            // Create a global variable to store the correct public path
            global.PUBLIC_PATH = path.join(process.cwd(), 'public');
            console.log('Setting public path to:', global.PUBLIC_PATH);
            
            // Override the path resolution for static files
            const originalResolve = path.resolve;
            path.resolve = function(...args) {
              // Check if this is a call to resolve a path with '/home/site/public'
              const joinedPath = args.join(' ');
              if (joinedPath.includes('/home/site/public')) {
                console.log('Intercepting path resolution for:', joinedPath);
                return joinedPath.replace('/home/site/public', global.PUBLIC_PATH);
              }
              return originalResolve.apply(this, args);
            };
            
            // Also monkey patch fs.stat, fs.readFile, etc. to catch any direct file access
            const originalStat = fs.stat;
            fs.stat = function(path, callback) {
              if (typeof path === 'string' && path.startsWith('/home/site/public/')) {
                const newPath = path.replace('/home/site/public/', `${global.PUBLIC_PATH}/`);
                console.log(`Redirecting fs.stat from ${path} to ${newPath}`);
                return originalStat(newPath, callback);
              }
              return originalStat(path, callback);
            };
            
            const originalStatSync = fs.statSync;
            fs.statSync = function(path, options) {
              if (typeof path === 'string' && path.startsWith('/home/site/public/')) {
                const newPath = path.replace('/home/site/public/', `${global.PUBLIC_PATH}/`);
                console.log(`Redirecting fs.statSync from ${path} to ${newPath}`);
                return originalStatSync(newPath, options);
              }
              return originalStatSync(path, options);
            };
            
            // Create a symlink as an alternative approach
            try {
              if (!fs.existsSync('/home/site/public')) {
                console.log('Creating symlink from /home/site/public to', global.PUBLIC_PATH);
                fs.symlinkSync(global.PUBLIC_PATH, '/home/site/public', 'dir');
              }
            } catch (err) {
              console.log('Failed to create symlink:', err.message);
            }
          } else {
            console.log('Not running in Azure environment, no path fixes needed.');
          }
          EOL
          
          # Insert the path fix at the top of server.js
          sed -i '1s/^/require(".\/path-fix.js");\n/' server/server.js
          
          # Copy the path-fix.js file to deployment
          cp server/path-fix.js server/

      - name: Prepare deployment
        run: |
          # Create deployment directory
          mkdir -p deployment
          
          # Copy server files
          mkdir -p deployment/server
          cp -r server/* deployment/server/
          rm -rf deployment/server/node_modules 2>/dev/null || true
          
          # Move necessary files to root
          cp server/server.js deployment/
          cp server/path-fix.js deployment/
          cp server/package.json deployment/
          cp server/package-lock.json deployment/ 2>/dev/null || true
          
          # Copy public directory
          cp -r public deployment/
          
          # Create web.config for Azure
          cat > deployment/web.config << 'EOL'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
                    <match url="^server.js\/debug[\/]?" />
                  </rule>
                  <rule name="StaticContent">
                    <action type="Rewrite" url="public{REQUEST_URI}"/>
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="server.js"/>
                  </rule>
                </rules>
              </rewrite>
              <security>
                <requestFiltering>
                  <hiddenSegments>
                    <remove segment="bin"/>
                  </hiddenSegments>
                </requestFiltering>
              </security>
              <httpErrors existingResponse="PassThrough" />
            </system.webServer>
          </configuration>
          EOL

      - name: Zip artifact for deployment
        run: |
          cd deployment
          zip -r ../release.zip ./*

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_5D151C7368624A2BA02DA12C591D5E0D }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_372F13A1954945AEAE3A9EF9F48AC763 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_AADFC2A08B394A799450523069F2F441 }}

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'ddrc'
          slot-name: 'Production'
          package: .
