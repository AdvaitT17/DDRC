# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - ddrc

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Debug directory structure
        run: |
          echo "Current directory structure:"
          ls -la
          echo "Public directory:"
          ls -la public || echo "Public directory not found"
          echo "Server directory:"
          ls -la server || echo "Server directory not found"

      - name: Install dependencies
        run: |
          cd server
          npm install
          cd ..

      - name: Modify server.js to handle missing path
        run: |
          # Create a backup of server.js
          cp server/server.js server/server.js.bak
          
          # Add debugging code to server.js to log path issues
          cat > server/debug-paths.js << 'EOL'
          // Path debugging code
          const fs = require('fs');
          const path = require('path');

          // Log current directory and available files
          console.log('Current working directory:', process.cwd());
          console.log('Directory contents:', fs.readdirSync('.'));
          
          // Check for public directory
          const publicPath = path.join(process.cwd(), 'public');
          console.log('Looking for public directory at:', publicPath);
          if (fs.existsSync(publicPath)) {
            console.log('Public directory exists, contents:', fs.readdirSync(publicPath));
          } else {
            console.log('Public directory not found! Checking other locations...');
            
            // Check site/wwwroot/public
            const wwwrootPublicPath = path.join('/home/site/wwwroot', 'public');
            if (fs.existsSync(wwwrootPublicPath)) {
              console.log('Found public at wwwroot:', wwwrootPublicPath);
              console.log('Contents:', fs.readdirSync(wwwrootPublicPath));
            }
            
            // Check parent directory
            const parentPublicPath = path.join(process.cwd(), '..', 'public');
            if (fs.existsSync(parentPublicPath)) {
              console.log('Found public in parent dir:', parentPublicPath);
              console.log('Contents:', fs.readdirSync(parentPublicPath));
            }
          }
          EOL
          
          # Insert the debugging code at the top of server.js
          sed -i '1s/^/require(".\/debug-paths.js");\n/' server/server.js

      - name: Prepare deployment
        run: |
          # Use a simpler approach - copy the entire repo
          mkdir -p deployment
          
          # Copy server directory (excluding node_modules)
          mkdir -p deployment/server
          cp -r server/* deployment/server/
          rm -rf deployment/server/node_modules 2>/dev/null || true
          
          # Move server.js to the root
          cp server/server.js deployment/
          cp server/debug-paths.js deployment/
          cp server/package.json deployment/
          
          # Copy public directory
          cp -r public deployment/
          
          # Create an index.html file at multiple potential locations
          # to help debug the path issue
          echo "<html><body><h1>DDRC App</h1><p>If you see this, the deployment worked!</p></body></html>" > deployment/index.html
          
          mkdir -p deployment/public
          echo "<html><body><h1>DDRC App - Public Directory</h1><p>This is the index.html in the public directory.</p></body></html>" > deployment/public/index.html
          
          # Create a web.config for Azure
          cat > deployment/web.config << 'EOL'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
                    <match url="^server.js\/debug[\/]?" />
                  </rule>
                  <rule name="StaticContent">
                    <action type="Rewrite" url="public{REQUEST_URI}"/>
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="server.js"/>
                  </rule>
                </rules>
              </rewrite>
              <security>
                <requestFiltering>
                  <hiddenSegments>
                    <remove segment="bin"/>
                  </hiddenSegments>
                </requestFiltering>
              </security>
              <httpErrors existingResponse="PassThrough" />
            </system.webServer>
          </configuration>
          EOL
          
          # Create a deployment script to be run after deployment
          cat > deployment/deploy.sh << 'EOL'
          #!/bin/bash
          echo "Running post-deployment script..."
          cd /home/site/wwwroot
          npm install
          echo "Deployment script completed."
          # List directory contents to verify structure
          echo "Directory structure:"
          ls -la
          echo "Public directory:"
          ls -la public || echo "Public directory not found"
          EOL
          chmod +x deployment/deploy.sh

      - name: Zip artifact for deployment
        run: |
          cd deployment
          zip -r ../release.zip ./*

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_5D151C7368624A2BA02DA12C591D5E0D }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_372F13A1954945AEAE3A9EF9F48AC763 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_AADFC2A08B394A799450523069F2F441 }}

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'ddrc'
          slot-name: 'Production'
          package: .
