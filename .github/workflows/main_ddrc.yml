name: Build and deploy Node.js app to Azure Web App - ddrc

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Install dependencies
        run: |
          cd server
          npm install
          cd ..

      - name: Run tests
        run: |
          cd server
          npm test
          cd ..

      - name: Apply path fixes for Azure
        run: |
          cp server/server.js server/server.js.bak
          cat > server/path-fix.js << 'EOL'
          // Path correction for Azure deployment
          const fs = require('fs');
          const path = require('path');

          const isAzure = process.env.WEBSITE_SITE_NAME !== undefined;

          if (isAzure) {
            console.log('Running in Azure environment, applying path fixes...');
            global.PUBLIC_PATH = path.join(process.cwd(), 'public');
            console.log('Setting public path to:', global.PUBLIC_PATH);

            // Monkey patch path.resolve
            const originalResolve = path.resolve;
            path.resolve = function(...args) {
              const result = originalResolve.apply(this, args);
              if (result.includes('/home/site/public')) {
                console.log('Intercepting path resolution for:', result);
                return result.replace('/home/site/public', global.PUBLIC_PATH);
              }
              return result;
            };

            // Monkey patch fs.stat and fs.statSync
            ['stat', 'statSync'].forEach(method => {
              const original = fs[method];
              fs[method] = function(pathStr, ...args) {
                if (typeof pathStr === 'string' && pathStr.startsWith('/home/site/public/')) {
                  const newPath = pathStr.replace('/home/site/public/', `${global.PUBLIC_PATH}/`);
                  console.log(`Redirecting fs.${method} from ${pathStr} to ${newPath}`);
                  return original.call(this, newPath, ...args);
                }
                return original.apply(this, arguments);
              };
            });

            // Create symlink if possible
            try {
              if (!fs.existsSync('/home/site/public')) {
                console.log('Creating symlink from /home/site/public to', global.PUBLIC_PATH);
                fs.symlinkSync(global.PUBLIC_PATH, '/home/site/public', 'dir');
              }
            } catch (err) {
              console.log('Failed to create symlink:', err.message);
            }
          } else {
            console.log('Not running in Azure environment, no path fixes needed.');
          }
          EOL
          sed -i '1s/^/require(".\/path-fix.js");\n/' server/server.js

      - name: Prepare deployment
        run: |
          mkdir -p deployment
          cp -r server deployment/
          rm -rf deployment/server/node_modules
          cp -r public deployment/

          # Move server files to root of deployment
          mv deployment/server/* deployment/
          rm -rf deployment/server

          # Create required upload directories
          mkdir -p deployment/uploads/news
          mkdir -p deployment/uploads/forms
          mkdir -p deployment/uploads/documents
          mkdir -p deployment/uploads/events

          # Set proper permissions for upload directories
          chmod -R 755 deployment/uploads

          # Create startup script to ensure directories exist and have proper permissions
          cat > deployment/startup.sh << 'EOL'
          #!/bin/bash

          # Create required directories if they don't exist
          mkdir -p /home/site/wwwroot/uploads/news
          mkdir -p /home/site/wwwroot/uploads/forms
          mkdir -p /home/site/wwwroot/uploads/documents
          mkdir -p /home/site/wwwroot/uploads/events

          # Set proper permissions
          chmod -R 755 /home/site/wwwroot/uploads

          # Start the application
          node server.js
          EOL

          # Make startup script executable
          chmod +x deployment/startup.sh

          # Create web.config with startup script
          cat > deployment/web.config << 'EOL'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="startup.sh" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
                    <match url="^startup.sh\/debug[\/]?" />
                  </rule>
                  <rule name="StaticContent">
                    <action type="Rewrite" url="public{REQUEST_URI}"/>
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="startup.sh"/>
                  </rule>
                </rules>
              </rewrite>
              <security>
                <requestFiltering>
                  <hiddenSegments>
                    <remove segment="bin"/>
                  </hiddenSegments>
                  <!-- Increase max allowed content length for file uploads -->
                  <requestLimits maxAllowedContentLength="50000000" />
                </requestFiltering>
              </security>
              <httpErrors existingResponse="PassThrough" />
              <!-- Configure iisnode -->
              <iisnode
                nodeProcessCommandLine="node"
                watchedFiles="*.js;node_modules\*;routes\*.js;views\*.jade;middleware\*.js"
                loggingEnabled="true"
                logDirectory="iisnode"
                debuggingEnabled="false"
              />
            </system.webServer>
          </configuration>
          EOL

      - name: Zip artifact for deployment
        run: |
          cd deployment
          zip -r ../release.zip ./*

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "Production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_5D151C7368624A2BA02DA12C591D5E0D }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_372F13A1954945AEAE3A9EF9F48AC763 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_AADFC2A08B394A799450523069F2F441 }}

      - name: "Deploy to Azure Web App"
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: "ddrc"
          slot-name: "Production"
          package: .

      - name: "Configure Azure App Service settings"
        uses: azure/appservice-settings@v1
        with:
          app-name: "ddrc"
          app-settings-json: |
            [
              {
                "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
                "value": "true",
                "slotSetting": false
              },
              {
                "name": "WEBSITE_RUN_FROM_PACKAGE",
                "value": "0",
                "slotSetting": false
              }
            ]
